enum SortingDirection {
  ASC
  DESC
}

type Continent @alias(property:"continent") {
  _id: ID! @id
  type: String
  code: String
  desc: String
  airportContainssOut(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport] @relationship(edgeType:"contains", direction:OUT)
  contains:Contains
}

input ContinentInput {
  _id: ID @id
  type: StringScalarFilters
  code: StringScalarFilters
  desc: StringScalarFilters
}

input ContinentCreateInput {
  _id: ID @id
  type: String
  code: String
  desc: String
}

input ContinentUpdateInput {
  _id: ID! @id
  type: String
  code: String
  desc: String
}

input ContinentSort {
  _id: SortingDirection
  type: SortingDirection
  code: SortingDirection
  desc: SortingDirection
}

type Country @alias(property:"country") {
  _id: ID! @id
  type: String
  code: String
  desc: String
  airportContainssOut(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport] @relationship(edgeType:"contains", direction:OUT)
  contains:Contains
}

input CountryInput {
  _id: ID @id
  type: StringScalarFilters
  code: StringScalarFilters
  desc: StringScalarFilters
}

input CountryCreateInput {
  _id: ID @id
  type: String
  code: String
  desc: String
}

input CountryUpdateInput {
  _id: ID! @id
  type: String
  code: String
  desc: String
}

input CountrySort {
  _id: SortingDirection
  type: SortingDirection
  code: SortingDirection
  desc: SortingDirection
}

type Version @alias(property:"version") {
  _id: ID! @id
  date: String
  desc: String
  author: String
  type: String
  code: String
}

input VersionInput {
  _id: ID @id
  date: StringScalarFilters
  desc: StringScalarFilters
  author: StringScalarFilters
  type: StringScalarFilters
  code: StringScalarFilters
}

input VersionCreateInput {
  _id: ID @id
  date: String
  desc: String
  author: String
  type: String
  code: String
}

input VersionUpdateInput {
  _id: ID! @id
  date: String
  desc: String
  author: String
  type: String
  code: String
}

input VersionSort {
  _id: SortingDirection
  date: SortingDirection
  desc: SortingDirection
  author: SortingDirection
  type: SortingDirection
  code: SortingDirection
}

type Airport @alias(property:"airport") {
  _id: ID! @id
  type: String
  city: String
  icao: String
  code: String
  country: String
  lat: Float
  longest: Int
  runways: Int
  desc: String
  lon: Float
  region: String
  elev: Int
  continentContainsIn: Continent @relationship(edgeType:"contains", direction:IN)
  countryContainsIn: Country @relationship(edgeType:"contains", direction:IN)
  airportRoutesOut(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport] @relationship(edgeType:"route", direction:OUT)
  airportRoutesIn(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport] @relationship(edgeType:"route", direction:IN)
  contains:Contains
  route:Route
}

input AirportInput {
  _id: ID @id
  type: StringScalarFilters
  city: StringScalarFilters
  icao: StringScalarFilters
  code: StringScalarFilters
  country: StringScalarFilters
  lat: Float
  longest: Int
  runways: Int
  desc: StringScalarFilters
  lon: Float
  region: StringScalarFilters
  elev: Int
}

input AirportCreateInput {
  _id: ID @id
  type: String
  city: String
  icao: String
  code: String
  country: String
  lat: Float
  longest: Int
  runways: Int
  desc: String
  lon: Float
  region: String
  elev: Int
}

input AirportUpdateInput {
  _id: ID! @id
  type: String
  city: String
  icao: String
  code: String
  country: String
  lat: Float
  longest: Int
  runways: Int
  desc: String
  lon: Float
  region: String
  elev: Int
}

input AirportSort {
  _id: SortingDirection
  type: SortingDirection
  city: SortingDirection
  icao: SortingDirection
  code: SortingDirection
  country: SortingDirection
  lat: SortingDirection
  longest: SortingDirection
  runways: SortingDirection
  desc: SortingDirection
  lon: SortingDirection
  region: SortingDirection
  elev: SortingDirection
}

type Contains @alias(property:"contains") {
  _id: ID! @id
}

type Route @alias(property:"route") {
  _id: ID! @id
  dist: Int
}

input RouteInput {
  dist: Int
}

input Options {
  limit:Int
  offset: Int
}

input StringScalarFilters {
  eq: String
  contains: String
  endsWith: String
  startsWith: String
}

type Query {
  airportsQuery_getNodeContinent(filter: ContinentInput): Continent
  airportsQuery_getNodeContinents(filter: ContinentInput, options: Options, sort: [ContinentSort!]): [Continent]
  airportsQuery_getNodeCountry(filter: CountryInput): Country
  airportsQuery_getNodeCountrys(filter: CountryInput, options: Options, sort: [CountrySort!]): [Country]
  airportsQuery_getNodeVersion(filter: VersionInput): Version
  airportsQuery_getNodeVersions(filter: VersionInput, options: Options, sort: [VersionSort!]): [Version]
  airportsQuery_getNodeAirport(filter: AirportInput): Airport
  airportsQuery_getNodeAirports(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport]
}

type Mutation {
  createNodeContinent(input: ContinentCreateInput!): Continent
  updateNodeContinent(input: ContinentUpdateInput!): Continent
  deleteNodeContinent(_id: ID!): Boolean
  createNodeCountry(input: CountryCreateInput!): Country
  updateNodeCountry(input: CountryUpdateInput!): Country
  deleteNodeCountry(_id: ID!): Boolean
  createNodeVersion(input: VersionCreateInput!): Version
  updateNodeVersion(input: VersionUpdateInput!): Version
  deleteNodeVersion(_id: ID!): Boolean
  createNodeAirport(input: AirportCreateInput!): Airport
  updateNodeAirport(input: AirportUpdateInput!): Airport
  deleteNodeAirport(_id: ID!): Boolean
  connectNodeContinentToNodeAirportEdgeContains(from_id: ID!, to_id: ID!): Contains
  deleteEdgeContainsFromContinentToAirport(from_id: ID!, to_id: ID!): Boolean
  connectNodeCountryToNodeAirportEdgeContains(from_id: ID!, to_id: ID!): Contains
  deleteEdgeContainsFromCountryToAirport(from_id: ID!, to_id: ID!): Boolean
  connectNodeAirportToNodeAirportEdgeRoute(from_id: ID!, to_id: ID!, edge: RouteInput!): Route
  updateEdgeRouteFromAirportToAirport(from_id: ID!, to_id: ID!, edge: RouteInput!): Route
  deleteEdgeRouteFromAirportToAirport(from_id: ID!, to_id: ID!): Boolean
}

schema {
  query: Query
  mutation: Mutation
}