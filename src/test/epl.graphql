enum SortingDirection {
    ASC
    DESC
}

type Stadium {
    _id: ID! @id
    opened: Int
    capacity: Int
    name: String
    cityCity_edgeOut: City @relationship(edgeType: "CITY_EDGE", direction: OUT)
    CITY_EDGE: City_edge
    STADIUM_EDGE: Stadium_edge
}

input StadiumInput {
    _id: ID @id
    opened: Int
    capacity: Int
    name: StringScalarFilters
}

input StadiumSort {
    _id: SortingDirection
    opened: SortingDirection
    capacity: SortingDirection
    name: SortingDirection
}

type League {
    _id: ID! @id
    nickname: String
    name: String
    teamCurrent_leaguesIn(filter: TeamInput, options: Options, sort: [TeamSort!]): [Team] @relationship(edgeType: "CURRENT_LEAGUE", direction: IN)
    CURRENT_LEAGUE: Current_league
}

input LeagueInput {
    _id: ID @id
    nickname: StringScalarFilters
    name: StringScalarFilters
}

input LeagueSort {
    _id: SortingDirection
    nickname: SortingDirection
    name: SortingDirection
}

type Team {
    _id: ID! @id
    nickname: String
    name: String
    fullName: String
    founded: Int
    leagueCurrent_leagueOut: League @relationship(edgeType: "CURRENT_LEAGUE", direction: OUT)
    CURRENT_LEAGUE: Current_league
    STADIUM_EDGE: Stadium_edge
}

input TeamInput {
    _id: ID @id
    nickname: StringScalarFilters
    name: StringScalarFilters
    fullName: StringScalarFilters
    founded: Int
}

input TeamSort {
    _id: SortingDirection
    nickname: SortingDirection
    name: SortingDirection
    fullName: SortingDirection
    founded: SortingDirection
}

type City {
    _id: ID! @id
    name: String
    stadiumCity_edgesIn(filter: StadiumInput, options: Options, sort: [StadiumSort!]): [Stadium] @relationship(edgeType: "CITY_EDGE", direction: IN)
    CITY_EDGE: City_edge
}

input CityInput {
    _id: ID @id
    name: StringScalarFilters
}

input CitySort {
    _id: SortingDirection
    name: SortingDirection
}

type City_edge @alias(property: "CITY_EDGE") {
    _id: ID! @id
}

type Current_league @alias(property: "CURRENT_LEAGUE") {
    _id: ID! @id
}

type Stadium_edge @alias(property: "STADIUM_EDGE") {
    _id: ID! @id
}

input Options {
    limit: Int
    offset: Int
}

input StringScalarFilters {
    eq: String
    contains: String
    endsWith: String
    startsWith: String
}

type Query {
    getNodeStadium(filter: StadiumInput): Stadium
    getNodeStadiums(filter: StadiumInput, options: Options, sort: [StadiumSort!]): [Stadium]
    getNodeLeague(filter: LeagueInput): League
    getNodeLeagues(filter: LeagueInput, options: Options, sort: [LeagueSort!]): [League]
    getNodeTeam(filter: TeamInput): Team
    getNodeTeams(filter: TeamInput, options: Options, sort: [TeamSort!]): [Team]
    getNodeCity(filter: CityInput): City
    getNodeCitys(filter: CityInput, options: Options, sort: [CitySort!]): [City]
}

schema {
    query: Query
}
