enum SortingDirection {
    ASC
    DESC
}

type City @alias(property: "city") {
    _id: ID! @id
    name: String
    personLivessIn(filter: PersonInput, options: Options, sort: [PersonSort!]): [Person] @relationship(edgeType: "lives", direction: IN)
    restaurantWithinsIn(filter: RestaurantInput, options: Options, sort: [RestaurantSort!]): [Restaurant] @relationship(edgeType: "within", direction: IN)
    lives: Lives
    within: Within
}

input CityInput {
    _id: ID @id
    name: StringScalarFilters
}

input CitySort {
    _id: SortingDirection
    name: SortingDirection
}

type Review @alias(property: "review") {
    _id: ID! @id
    body: String
    created_date: String
    rating: Int
    personWroteIn: Person @relationship(edgeType: "wrote", direction: IN)
    restaurantAboutOut: Restaurant @relationship(edgeType: "about", direction: OUT)
    wrote: Wrote
    about: About
}

input ReviewInput {
    _id: ID @id
    body: StringScalarFilters
    created_date: StringScalarFilters
    rating: Int
}

input ReviewSort {
    _id: SortingDirection
    body: SortingDirection
    created_date: SortingDirection
    rating: SortingDirection
}

type Person @alias(property: "person") {
    _id: ID! @id
    first_name: String
    last_name: String
    person_id: Int
    cityLivesOut: City @relationship(edgeType: "lives", direction: OUT)
    reviewWrotesOut(filter: ReviewInput, options: Options, sort: [ReviewSort!]): [Review] @relationship(edgeType: "wrote", direction: OUT)
    personFriendssOut(filter: PersonInput, options: Options, sort: [PersonSort!]): [Person] @relationship(edgeType: "friends", direction: OUT)
    personFriendssIn(filter: PersonInput, options: Options, sort: [PersonSort!]): [Person] @relationship(edgeType: "friends", direction: IN)
    lives: Lives
    wrote: Wrote
    friends: Friends
}

input PersonInput {
    _id: ID @id
    first_name: StringScalarFilters
    last_name: StringScalarFilters
    person_id: Int
}

input PersonSort {
    _id: SortingDirection
    first_name: SortingDirection
    last_name: SortingDirection
    person_id: SortingDirection
}

type Restaurant @alias(property: "restaurant") {
    _id: ID! @id
    restaurant_id: Int
    name: String
    address: String
    cityWithinOut: City @relationship(edgeType: "within", direction: OUT)
    cuisineServesOut: Cuisine @relationship(edgeType: "serves", direction: OUT)
    reviewAboutsIn(filter: ReviewInput, options: Options, sort: [ReviewSort!]): [Review] @relationship(edgeType: "about", direction: IN)
    within: Within
    serves: Serves
    about: About
}

input RestaurantInput {
    _id: ID @id
    restaurant_id: Int
    name: StringScalarFilters
    address: StringScalarFilters
}

input RestaurantSort {
    _id: SortingDirection
    restaurant_id: SortingDirection
    name: SortingDirection
    address: SortingDirection
}

type Cuisine @alias(property: "cuisine") {
    _id: ID! @id
    name: String
    restaurantServessIn(filter: RestaurantInput, options: Options, sort: [RestaurantSort!]): [Restaurant] @relationship(edgeType: "serves", direction: IN)
    serves: Serves
}

input CuisineInput {
    _id: ID @id
    name: StringScalarFilters
}

input CuisineSort {
    _id: SortingDirection
    name: SortingDirection
}

type State @alias(property: "state") {
    _id: ID! @id
    name: String
    within: Within
}

input StateInput {
    _id: ID @id
    name: StringScalarFilters
}

input StateSort {
    _id: SortingDirection
    name: SortingDirection
}

type Lives @alias(property: "lives") {
    _id: ID! @id
}

type Within @alias(property: "within") {
    _id: ID! @id
}

type Serves @alias(property: "serves") {
    _id: ID! @id
}

type Wrote @alias(property: "wrote") {
    _id: ID! @id
}

type About @alias(property: "about") {
    _id: ID! @id
}

type Friends @alias(property: "friends") {
    _id: ID! @id
}

input Options {
    limit: Int
    offset: Int
}

input StringScalarFilters {
    eq: String
    contains: String
    endsWith: String
    startsWith: String
}

type Query {
    getCity(filter: CityInput): City
    getCitys(filter: CityInput, options: Options, sort: [CitySort!]): [City]
    getReview(filter: ReviewInput): Review
    getReviews(filter: ReviewInput, options: Options, sort: [ReviewSort!]): [Review]
    getPerson(filter: PersonInput): Person
    getPersons(filter: PersonInput, options: Options, sort: [PersonSort!]): [Person]
    getRestaurant(filter: RestaurantInput): Restaurant
    getRestaurants(filter: RestaurantInput, options: Options, sort: [RestaurantSort!]): [Restaurant]
    getCuisine(filter: CuisineInput): Cuisine
    getCuisines(filter: CuisineInput, options: Options, sort: [CuisineSort!]): [Cuisine]
    getState(filter: StateInput): State
    getStates(filter: StateInput, options: Options, sort: [StateSort!]): [State]
}

schema {
    query: Query
}
