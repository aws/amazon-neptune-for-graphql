enum SortingDirection {
    ASC
    DESC
}

type Dateofbirth @alias(property: "DateOfBirth") {
    _id: ID! @id
    value: String
    accountFeature_of_accountsOut(filter: AccountInput, options: Options, sort: [AccountSort!]): [Account] @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: OUT)
    FEATURE_OF_ACCOUNT: Feature_of_account
}

input DateofbirthInput {
    _id: ID @id
    value: StringScalarFilters
}

input DateofbirthSort {
    _id: SortingDirection
    value: SortingDirection
}

type Account {
    _id: ID! @id
    first_name: String
    account_number: String
    last_name: String
    emailaddressFeature_of_accountsIn(filter: EmailaddressInput, options: Options, sort: [EmailaddressSort!]): [Emailaddress] @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: IN)
    ipaddressFeature_of_accountIn: Ipaddress @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: IN)
    addressFeature_of_accountIn: Address @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: IN)
    dateofbirthFeature_of_accountIn: Dateofbirth @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: IN)
    phonenumberFeature_of_accountsIn(filter: PhonenumberInput, options: Options, sort: [PhonenumberSort!]): [Phonenumber] @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: IN)
    transactionAccount_edgesIn(filter: TransactionInput, options: Options, sort: [TransactionSort!]): [Transaction] @relationship(edgeType: "ACCOUNT_EDGE", direction: IN)
    FEATURE_OF_ACCOUNT: Feature_of_account
    ACCOUNT_EDGE: Account_edge
}

input AccountInput {
    _id: ID @id
    first_name: StringScalarFilters
    account_number: StringScalarFilters
    last_name: StringScalarFilters
}

input AccountSort {
    _id: SortingDirection
    first_name: SortingDirection
    account_number: SortingDirection
    last_name: SortingDirection
}

type Merchant {
    _id: ID! @id
    name: String
    transactionMerchant_edgesIn(filter: TransactionInput, options: Options, sort: [TransactionSort!]): [Transaction] @relationship(edgeType: "MERCHANT_EDGE", direction: IN)
    MERCHANT_EDGE: Merchant_edge
}

input MerchantInput {
    _id: ID @id
    name: StringScalarFilters
}

input MerchantSort {
    _id: SortingDirection
    name: SortingDirection
}

type Transaction {
    _id: ID! @id
    amount: Int
    created: String
    accountAccount_edgeOut: Account @relationship(edgeType: "ACCOUNT_EDGE", direction: OUT)
    ipaddressFeature_of_transactionIn: Ipaddress @relationship(edgeType: "FEATURE_OF_TRANSACTION", direction: IN)
    phonenumberFeature_of_transactionIn: Phonenumber @relationship(edgeType: "FEATURE_OF_TRANSACTION", direction: IN)
    merchantMerchant_edgeOut: Merchant @relationship(edgeType: "MERCHANT_EDGE", direction: OUT)
    ACCOUNT_EDGE: Account_edge
    FEATURE_OF_TRANSACTION: Feature_of_transaction
    MERCHANT_EDGE: Merchant_edge
}

input TransactionInput {
    _id: ID @id
    amount: Int
    created: StringScalarFilters
}

input TransactionSort {
    _id: SortingDirection
    amount: SortingDirection
    created: SortingDirection
}

type Address {
    _id: ID! @id
    value: String
    accountFeature_of_accountsOut(filter: AccountInput, options: Options, sort: [AccountSort!]): [Account] @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: OUT)
    FEATURE_OF_ACCOUNT: Feature_of_account
}

input AddressInput {
    _id: ID @id
    value: StringScalarFilters
}

input AddressSort {
    _id: SortingDirection
    value: SortingDirection
}

type Phonenumber @alias(property: "PhoneNumber") {
    _id: ID! @id
    value: String
    accountFeature_of_accountsOut(filter: AccountInput, options: Options, sort: [AccountSort!]): [Account] @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: OUT)
    transactionFeature_of_transactionsOut(filter: TransactionInput, options: Options, sort: [TransactionSort!]): [Transaction] @relationship(edgeType: "FEATURE_OF_TRANSACTION", direction: OUT)
    FEATURE_OF_ACCOUNT: Feature_of_account
    FEATURE_OF_TRANSACTION: Feature_of_transaction
}

input PhonenumberInput {
    _id: ID @id
    value: StringScalarFilters
}

input PhonenumberSort {
    _id: SortingDirection
    value: SortingDirection
}

type Ipaddress @alias(property: "IpAddress") {
    _id: ID! @id
    value: String
    accountFeature_of_accountsOut(filter: AccountInput, options: Options, sort: [AccountSort!]): [Account] @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: OUT)
    transactionFeature_of_transactionsOut(filter: TransactionInput, options: Options, sort: [TransactionSort!]): [Transaction] @relationship(edgeType: "FEATURE_OF_TRANSACTION", direction: OUT)
    FEATURE_OF_ACCOUNT: Feature_of_account
    FEATURE_OF_TRANSACTION: Feature_of_transaction
}

input IpaddressInput {
    _id: ID @id
    value: StringScalarFilters
}

input IpaddressSort {
    _id: SortingDirection
    value: SortingDirection
}

type Emailaddress @alias(property: "EmailAddress") {
    _id: ID! @id
    value: String
    accountFeature_of_accountsOut(filter: AccountInput, options: Options, sort: [AccountSort!]): [Account] @relationship(edgeType: "FEATURE_OF_ACCOUNT", direction: OUT)
    FEATURE_OF_ACCOUNT: Feature_of_account
}

input EmailaddressInput {
    _id: ID @id
    value: StringScalarFilters
}

input EmailaddressSort {
    _id: SortingDirection
    value: SortingDirection
}

type Feature_of_account @alias(property: "FEATURE_OF_ACCOUNT") {
    _id: ID! @id
}

type Account_edge @alias(property: "ACCOUNT_EDGE") {
    _id: ID! @id
}

type Feature_of_transaction @alias(property: "FEATURE_OF_TRANSACTION") {
    _id: ID! @id
}

type Merchant_edge @alias(property: "MERCHANT_EDGE") {
    _id: ID! @id
}

input Options {
    limit: Int
    offset: Int
}

input StringScalarFilters {
    eq: String
    contains: String
    endsWith: String
    startsWith: String
}

type Query {
    getDateofbirth(filter: DateofbirthInput): Dateofbirth
    getDateofbirths(filter: DateofbirthInput, options: Options, sort: [DateofbirthSort!]): [Dateofbirth]
    getAccount(filter: AccountInput): Account
    getAccounts(filter: AccountInput, options: Options, sort: [AccountSort!]): [Account]
    getMerchant(filter: MerchantInput): Merchant
    getMerchants(filter: MerchantInput, options: Options, sort: [MerchantSort!]): [Merchant]
    getTransaction(filter: TransactionInput): Transaction
    getTransactions(filter: TransactionInput, options: Options, sort: [TransactionSort!]): [Transaction]
    getAddress(filter: AddressInput): Address
    getAddresss(filter: AddressInput, options: Options, sort: [AddressSort!]): [Address]
    getPhonenumber(filter: PhonenumberInput): Phonenumber
    getPhonenumbers(filter: PhonenumberInput, options: Options, sort: [PhonenumberSort!]): [Phonenumber]
    getIpaddress(filter: IpaddressInput): Ipaddress
    getIpaddresss(filter: IpaddressInput, options: Options, sort: [IpaddressSort!]): [Ipaddress]
    getEmailaddress(filter: EmailaddressInput): Emailaddress
    getEmailaddresss(filter: EmailaddressInput, options: Options, sort: [EmailaddressSort!]): [Emailaddress]
}

schema {
    query: Query
}
