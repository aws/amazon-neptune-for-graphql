type Continent @alias(property:"continent") {
_id: ID! @id
type: String
code: String
desc: String
airportContainssOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType:"contains", direction:OUT)
contains:Contains
}

input ContinentInput {
_id: ID @id
type: String
code: String
desc: String
}

type Country @alias(property:"country") {
_id: ID! @id
type: String
code: String
desc: String
airportContainssOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType:"contains", direction:OUT)
contains:Contains
}

input CountryInput {
_id: ID @id
type: String
code: String
desc: String
}

type Version @alias(property:"version") {
_id: ID! @id
date: String
desc: String
author: String
type: String
code: String
}

input VersionInput {
_id: ID @id
date: String
desc: String
author: String
type: String
code: String
}

type Airport @alias(property:"airport") {
_id: ID! @id
type: String
city: String
icao: String
code: String
country: String
lat: Float
longest: Int
runways: Int
desc: String
lon: Float
region: String
elev: Int
outboundRoutesCount: Int @graphQuery(statement: "MATCH (this)-[r:route]->(a) RETURN count(r)")
continentContainsIn: Continent @relationship(edgeType:"contains", direction:IN)
countryContainsIn: Country @relationship(edgeType:"contains", direction:IN)
airportRoutesOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType:"route", direction:OUT)
airportRoutesIn(filter: AirportInput, options: Options): [Airport] @relationship(edgeType:"route", direction:IN)
contains:Contains
route:Route
}

input AirportInput {
_id: ID @id
type: String
city: String
icao: String
code: String
country: String
lat: Float
longest: Int
runways: Int
desc: String
lon: Float
region: String
elev: Int
}

type Contains @alias(property:"contains") {
_id: ID! @id
}

type Route @alias(property:"route") {
_id: ID! @id
dist: Int
}

input RouteInput {
dist: Int
}

input Options {
limit:Int
}

type Query {
getAirport(code: String): Airport
getAirportConnection(fromCode: String!, toCode: String!): Airport @cypher(statement: "MATCH (:airport{code: '$fromCode'})-[:route]->(this:airport)-[:route]->(:airport{code:'$toCode'})")
getContinentsWithGremlin: [Continent] @graphQuery(statement: "g.V().hasLabel('continent').elementMap().fold()")
getCountriesCountGremlin: Int @graphQuery(statement: "g.V().hasLabel('country').count()")
getNodeContinent(filter: ContinentInput): Continent
getNodeContinents(filter: ContinentInput, options: Options): [Continent]
getNodeCountry(filter: CountryInput): Country
getNodeCountrys(filter: CountryInput, options: Options): [Country]
getNodeVersion(filter: VersionInput): Version
getNodeVersions(filter: VersionInput, options: Options): [Version]
getNodeAirport(filter: AirportInput): Airport
getNodeAirports(filter: AirportInput, options: Options): [Airport]
getAirportWithGremlin(code: String): Airport @graphQuery(statement: "g.V().has('airport', 'code', '$code').elementMap()")
getCountriesCount: Int @graphQuery(statement: "g.V().hasLabel('country').count()")
}

type Mutation {
createNodeAirport(input: AirportInput!): Airport
updateNodeAirport(input: AirportInput!): Airport
}

schema {
  query: Query
  mutation: Mutation
}