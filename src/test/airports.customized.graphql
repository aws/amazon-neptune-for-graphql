enum SortingDirection {
  ASC
  DESC
}

type Continent @alias(property: "continent") {
  _id: ID! @id
  type: String
  code: String
  desc: String
  airportContainssOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType: "contains", direction: OUT)
  contains: Contains
}

input ContinentInput {
_id: ID @id
type: StringScalarFilters
code: StringScalarFilters
desc: StringScalarFilters
}

input ContinentCreateInput {
  _id: ID @id
  type: String
  code: String
  desc: String
}

input ContinentUpdateInput {
  _id: ID! @id
  type: String
  code: String
  desc: String
}

input ContinentSort {
  _id: SortingDirection
  type: SortingDirection
  code: SortingDirection
  desc: SortingDirection
}

type Country @alias(property: "country") {
  _id: ID! @id
  type: String
  code: String
  desc: String
  airportContainssOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType: "contains", direction: OUT)
  contains: Contains
}

input CountryInput {
_id: ID @id
type: StringScalarFilters
code: StringScalarFilters
desc: StringScalarFilters
}

input CountryCreateInput {
  _id: ID @id
  type: String
  code: String
  desc: String
}

input CountryUpdateInput {
  _id: ID! @id
  type: String
  code: String
  desc: String
}

input CountrySort {
  _id: SortingDirection
  type: SortingDirection
  code: SortingDirection
  desc: SortingDirection
}

type Version @alias(property: "version") {
  _id: ID! @id
  date: String
  desc: String
  author: String
  type: String
  code: String
}

input VersionInput {
_id: ID @id
date: StringScalarFilters
desc: StringScalarFilters
author: StringScalarFilters
type: StringScalarFilters
code: StringScalarFilters
}

input VersionCreateInput {
  _id: ID @id
  date: String
  desc: String
  author: String
  type: String
  code: String
}

input VersionUpdateInput {
  _id: ID! @id
  date: String
  desc: String
  author: String
  type: String
  code: String
}

input VersionSort {
  _id: SortingDirection
  date: SortingDirection
  desc: SortingDirection
  author: SortingDirection
  type: SortingDirection
  code: SortingDirection
}

type Airport @alias(property: "airport") {
  _id: ID! @id
  type: String
  city: String
  icao: String
  code: String
  country: String
  lat: Float
  longest: Int
  runways: Int
  desc: String
  lon: Float
  region: String
  elev: Int
  outboundRoutesCount: Int @graphQuery(statement: "MATCH (this)-[r:route]->(a) RETURN count(r)")
  continentContainsIn: Continent @relationship(edgeType:"contains", direction:IN)
  countryContainsIn: Country @relationship(edgeType:"contains", direction:IN)
  airportRoutesOut(filter: AirportInput, options: Options): [Airport] @relationship(edgeType:"route", direction:OUT)
  airportRoutesIn(filter: AirportInput, options: Options): [Airport] @relationship(edgeType:"route", direction:IN)
  contains:Contains
  route:Route
}

input AirportInput {
_id: ID @id
type: StringScalarFilters
city: StringScalarFilters
icao: StringScalarFilters
code: StringScalarFilters
country: StringScalarFilters
lat: Float
longest: Int
runways: Int
desc: StringScalarFilters
lon: Float
region: StringScalarFilters
elev: Int
}

input AirportCreateInput {
  _id: ID @id
  type: String
  city: String
  icao: String
  code: String
  country: String
  lat: Float
  longest: Int
  runways: Int
  desc: String
  lon: Float
  region: String
  elev: Int
}

input AirportUpdateInput {
  _id: ID! @id
  type: String
  city: String
  icao: String
  code: String
  country: String
  lat: Float
  longest: Int
  runways: Int
  desc: String
  lon: Float
  region: String
  elev: Int
}

input AirportSort {
  _id: SortingDirection
  type: SortingDirection
  city: SortingDirection
  icao: SortingDirection
  code: SortingDirection
  country: SortingDirection
  lat: SortingDirection
  longest: SortingDirection
  runways: SortingDirection
  desc: SortingDirection
  lon: SortingDirection
  region: SortingDirection
  elev: SortingDirection
}

type Contains @alias(property:"contains") {
_id: ID! @id
}

type Route @alias(property:"route") {
_id: ID! @id
dist: Int
}

input RouteInput {
dist: Int
}

input Options {
limit:Int
offset:Int
}

input StringScalarFilters {
eq: String
contains: String
endsWith: String
startsWith: String
}

type Query {
getAirport(code: String): Airport
getAirportConnection(fromCode: String!, toCode: String!): Airport @cypher(statement: "MATCH (:airport{code: '$fromCode'})-[:route]->(this:airport)-[:route]->(:airport{code:'$toCode'})")
getContinentsWithGremlin: [Continent] @graphQuery(statement: "g.V().hasLabel('continent').elementMap().fold()")
getCountriesCountGremlin: Int @graphQuery(statement: "g.V().hasLabel('country').count()")
getNodeContinent(filter: ContinentInput): Continent
getNodeContinents(filter: ContinentInput, options: Options, sort: [ContinentSort!]): [Continent]
getNodeCountry(filter: CountryInput): Country
getNodeCountrys(filter: CountryInput, options: Options, sort: [CountrySort!]): [Country]
getNodeVersion(filter: VersionInput): Version
getNodeVersions(filter: VersionInput, options: Options, sort: [VersionSort!]): [Version]
getNodeAirport(filter: AirportInput): Airport
getNodeAirports(filter: AirportInput, options: Options, sort: [AirportSort!]): [Airport]
getAirportWithGremlin(code: String): Airport @graphQuery(statement: "g.V().has('airport', 'code', '$code').elementMap()")
getCountriesCount: Int @graphQuery(statement: "g.V().hasLabel('country').count()")
}

type Mutation {
createNodeAirport(input: AirportCreateInput!): Airport
updateNodeAirport(input: AirportUpdateInput!): Airport
connectNodeCountryToNodeAirportEdgeContains(from_id: ID!, to_id: ID!): Contains
deleteEdgeContainsFromCountryToAirport(from_id: ID!, to_id: ID!): Boolean
updateEdgeRouteFromAirportToAirport(from_id: ID!, to_id: ID!, edge: RouteInput!): Route
createAirport(input: AirportCreateInput!): Airport @graphQuery(statement: "CREATE (this:airport {$input}) RETURN this")
}

schema {
  query: Query
  mutation: Mutation
}